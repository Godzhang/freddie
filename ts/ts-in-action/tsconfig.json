{
  "include": ["src/index.ts"],
  "compilerOptions": {
    /* Basic Options */
    "target": "es5" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */,
    "module": "commonjs" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,
    // "lib": [] /* TS 需要引用的库，即声明文件， 如果target是es5, 默认导入 'dom','es5','scripthost' 这三个库 Specify library files to be included in the compilation. */,
    // "allowJs": true /* 允许编译 js 文件（js、jsx） Allow javascript files to be compiled. */,
    // "checkJs": true /* 允许在js文件中报错，通常与allowJS 一起使用 Report errors in .js files. */,
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true /* 生成声明文件 Generates corresponding '.d.ts' file. */,
    // "declarationDir": "./d" /* 声明文件的路径 */,
    // "emitDeclarationOnly": true /* 只生成声明文件 */,
    // "declarationMap": true /* 为声明文件生成sourceMap Generates a sourcemap for each corresponding '.d.ts' file. */,
    // "sourceMap": true /* 生成目标文件的 srouceMap Generates corresponding '.map' file. */,
    // "outFile": "./app.js" /* 将多个相互依赖的文件生成一个文件，可以用在 AMD 模块中 Concatenate and emit output to single file. */,
    // "outDir": "./out" /* 指定输出目录 Redirect output structure to the directory. */,
    // "rootDir": "./" /* 指定输入文件目录 (用于输出) Specify the root directory of input files. Use to control the output directory structure with --outDir. */,
    // "composite": true /* 增量编译，能加快编译速度 Enable project compilation */,
    // "incremental": true /* 增量编译，能加快编译速度，最新版ts的该功能已改为用composite Enable incremental compilation */,
    // "diagnostics": true /* 打印诊断信息 */,
    // "tsBuildInfoFile": "./",               /* 增量编译文件的存储位置 Specify file to store incremental compilation information */
    // "removeComments": true /* 删除注释 Do not emit comments to output. */,
    // "noEmit": true /* 不输出任何文件 Do not emit outputs. */,
    // "noEmitOnError": true /* 发生错误时不输出文件 */,
    // "noEmitHelpers": true /* 不生成helper函数(例如，类的继承)，需额外安装ts-helpers(下面的importHelpers能代替ts-helpers) */,
    // "importHelpers": true /* 通过 tsLib 引入 helper 函数，文件必须是模块 Import emit helpers from 'tslib'. */,
    // "downlevelIteration": true /* 降级遍历器的实现(es3/5) Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */,
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true /* 开启所有严格的类型检查(如果为true，下面跟检查相关的都默认为true) Enable all strict type-checking options. */,
    // "noImplicitAny": true,                 /* 不允许隐式的 any 类型 Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* 不允许把 null, undefined 赋值给其他类型变量 Enable strict null checks. */
    // "strictFunctionTypes": false /* 不允许函数参数双向协变 Enable strict checking of function types. */,
    // "strictBindCallApply": true,           /* 严格的 bind/call/apply 检查 Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* 类的实例属性必须初始化 Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* 不允许 this 有隐式的 any 类型 Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* 在代码中注入 'use strict' Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                /* 检查(也就是不允许出现)只声明，未使用的局部变量 Report errors on unused locals. */
    // "noUnusedParameters": true,            /* 检查未使用的函数参数 Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* 每个分支都要有返回值(比如if else 两个分支里都要有返回值) Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* 防止 switch 语句贯穿（每个分支都要有break） Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // "moduleResolution": "node" /* 模块解析策略 Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,
    // "baseUrl": "./" /* 解析非相对模块的基地址，默认当前目录 Base directory to resolve non-absolute module names. */,
    // "paths": {
    //   "jquery": ["node_modules/jquery/dist/jquery.slim.min.js"]
    // } /* 路径映射，相对于baseUrl A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */,
    // "rootDirs": [
    //   "src",
    //   "out"
    // ] /* 将多个目录放在一个虚拟目录下，用于运行时 List of root folders whose combined content represents the structure of the project at runtime. */,
    // "typeRoots": [],                       /* 声明文件目录，默认 node_modules/@types List of folders to include type definitions from. */
    // "types": [],                           /* 声明文件包 Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true /* 允许 export = 方式导出， 由 import from 导入，或者由 import = require 导入 Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true /* 允许在模块中访问 UMD 全局变量 */
    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    "experimentalDecorators": true /* 启用装饰器特性 Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
    // "listEmittedFiles": true /* 打印输出的文件 */,
    // "listFiles": true /* 打印编译的文件 (包括引用的声明文件) */
  }
}
